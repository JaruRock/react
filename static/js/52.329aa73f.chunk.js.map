{"version":3,"sources":["service/ApiService.js","views/Base/Tables/Tables.js"],"names":["USER_API_BASE_URL","ApiService","console","log","axios","get","firstName","userId","delete","user","post","put","id","Tables","props","renderSizePerPageDropDown","className","map","n","idx","isActive","currSizePerPage","key","type","onClick","changeSizePerPage","createCustomDeleteButton","btnText","btnContextual","btnGlyphicon","state","users","message","currentPage","pageStart","pageTo","deleteUser","bind","editUser","addUser","reloadUserList","customConfirm","this","fetchUsers","then","res","setState","data","status","swal","title","text","icon","buttons","dangerMode","willDelete","button","window","localStorage","setItem","history","push","removeItem","start","to","total","style","color","next","dropRowKeys","dropRowKeysStr","join","options","handleConfirmDeleteRow","searchPosition","page","sizePerPageList","value","length","sizePerPage","pageStartIndex","paginationSize","prePage","nextPage","firstPage","lastPage","prePageTitle","nextPageTitle","firstPageTitle","lastPageTitle","paginationShowsTotal","renderShowsTotal","paginationPosition","keepSizePerPageState","alwaysShowAllBtns","deleteBtn","hover","bordered","striped","responsive","size","pagination","selectRow","mode","showOnlySelected","clickToSelect","bgColor","exportCSV","deleteRow","search","dataField","isKey","Component"],"mappings":"iKAEMA,EAAoB,qCAEpBC,E,qGAIE,OADAC,QAAQC,IAAI,cACLC,IAAMC,IAAIL,K,2CAEAM,GAEjB,OADAJ,QAAQC,IAAI,0BAA4BG,GACjCF,IAAMC,IAAIL,EAAoB,WAAaM,K,oCAGxCC,GAEV,OADAL,QAAQC,IAAI,mBAAqBI,GAC1BH,IAAMC,IAAIL,EAAoB,IAAMO,K,iCAGpCA,GAEP,OADAL,QAAQC,IAAI,gBAAkBI,GACvBH,IAAMI,OAAOR,EAAoB,IAAMO,K,8BAG1CE,GAEJ,OADAP,QAAQC,IAAI,aAAeM,GACpBL,IAAMM,KAAKV,EAAmBS,K,+BAGhCA,GAEL,OADAP,QAAQC,IAAI,cAAgBM,GACrBL,IAAMO,IAAIX,EAAoB,IAAMS,EAAKG,GAAIH,O,KAK7C,QAAIR,G,qNC4CbY,G,mBACJ,WAAYC,GAAQ,IAAD,8BACb,4CAAMA,KAqJVC,0BAA4B,SAAAD,GACxB,OACI,yBAAKE,UAAU,aAEP,CAAE,EAAG,GAAI,GAAI,GAAI,IAAKC,KAAI,SAACC,EAAGC,GAE1B,IAAMC,EAAYF,GAAKJ,EAAMO,gBAAmB,SAAW,KAE3D,OACI,4BAAQC,IAAMH,EAAMI,KAAK,SAASP,UAAS,wBAAoBI,GAAaI,QAAU,kBAAMV,EAAMW,kBAAkBP,KAAOA,QA/JlI,EA8PjBQ,yBAA2B,SAACF,GACxB,OACI,kBAAC,eAAD,CACIG,QAAQ,SACRC,cAAc,aACdZ,UAAU,kBACVa,aAAa,2CAlQrB,EAAKC,MAAQ,CACTxB,UAAW,GACXyB,MAAO,GACPC,QAAS,KACTC,YAAa,EACbC,UAAU,EACVC,OAAO,GAEX,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKE,QAAU,EAAKA,QAAQF,KAAb,gBACf,EAAKG,eAAiB,EAAKA,eAAeH,KAApB,gBACtB,EAAKI,cAAgB,EAAKA,cAAcJ,KAAnB,gBAdR,E,iFAyCbK,KAAKF,mB,uCAGS,IAAD,OACftC,QAAQC,IAAI,kBAEVF,IAAW0C,aACNC,MAAK,SAACC,GAQH,EAAKC,SAAS,CAACf,MAAOc,EAAIE,OAC1B7C,QAAQC,IAAI,gBAAiB0C,EAAIG,a,iCAKlCzC,GAEP0C,IAAK,CACDC,MAAO,gBACPC,KAAM,gCACNC,KAAM,UACNC,SAAS,EACTC,YAAY,IAGXV,MAAK,SAAAW,GACEA,GACAtD,IAAWmC,WAAW7B,GACjBqC,MAAK,SAAAC,GACFI,IAAK,CACDC,MAAO,QACPC,KAAM,QAAS5C,EAAQ,cACvB6C,KAAM,UACNI,QAAQ,Y,+BAiB3B5C,GACL6C,OAAOC,aAAaC,QAAQ,KAAM/C,GAClC8B,KAAK5B,MAAM8C,QAAQC,KAAK,qB,gCAIxBJ,OAAOC,aAAaI,WAAW,MAC/BpB,KAAK5B,MAAM8C,QAAQC,KAAK,oB,uCA+DXE,EAAOC,EAAIC,GACxB,OACI,wBAAIC,MAAQ,CAAEC,MAAO,UAArB,QACWJ,EADX,OACwBC,EADxB,eAC0CC,EAD1C,c,oCA8CMG,EAAMC,GAAc,IAAD,OAEzBC,EAAiBD,EAAYE,KAAK,KAEtCrE,QAAQC,IAAI,oBAAsBmE,GAElCrB,IAAK,CACDC,MAAO,gBACPC,KAAM,gCACNC,KAAM,UACNC,SAAS,EACTC,YAAY,IAGXV,MAAK,SAAAW,GACEA,GACAtD,IAAWmC,WAAWkC,GACjB1B,MAAK,SAAAC,GACFI,IAAK,CACDC,MAAO,QACPC,KAAM,QAASmB,EAAgB,cAC/BlB,KAAM,UACNI,QAAQ,IAEZY,IACA,EAAK5B,yB,+BAyBnB,IAAD,OAcCgC,EAAU,CACZC,uBAAwB/B,KAAKD,cAC7BiC,eAAgB,QAIhBC,KAAM,EACNC,gBAAiB,CAAE,CACfzB,KAAM,IAAK0B,MAAO,GACnB,CACC1B,KAAM,KAAM0B,MAAO,IACpB,CACC1B,KAAM,KAAM0B,MAAO,IACpB,CACC1B,KAAM,KAAM0B,MAAO,IACpB,CACC1B,KAAM,MAAO0B,MAAOnC,KAAKZ,MAAMC,MAAM+C,SAEzCC,YAAa,EACbC,eAAgB,EAChBC,eAAgB,EAChBC,QAAS,OACTC,SAAU,OACVC,UAAW,QACXC,SAAU,OACVC,aAAc,iBACdC,cAAe,aACfC,eAAgB,cAChBC,cAAe,aACfC,qBAAsBhD,KAAKiD,iBAC3BC,mBAAoB,OACnBC,sBAAsB,EAEtBC,mBAAmB,EAGpBC,UAAWrD,KAAKhB,0BAGpB,OACI,yBAAKV,UAAU,mBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KAEI,kBAAC,IAAD,CAAQmD,MAAM,UAAU3C,QAAS,kBAAM,EAAKe,YACxC,uBAAGvB,UAAU,wBADjB,iBAMJ,kBAAC,IAAD,CAAOgF,OAAK,EAACC,UAAQ,EAACC,SAAO,EAACC,YAAU,EAACC,KAAK,MAC9C,kBAAC,IAAD,KAEI,kBAAC,iBAAD,CAAgBrD,KAAOL,KAAKZ,MAAMC,MAClBsE,YAAa,EACb7B,QAAUA,EACV8B,UAnEtB,CACdC,KAAM,WACNC,kBAAkB,EAClBC,eAAe,EACfC,QAAS,UAgE2BC,WAAS,EACTC,WAAS,EACTC,QAAM,GAClB,kBAAC,oBAAD,CAAmBC,UAAU,KAAKC,OAAQ,GAA1C,WACA,kBAAC,oBAAD,CAAmBD,UAAU,YAA7B,aACA,kBAAC,oBAAD,CAAmBA,UAAU,aAA7B,cACA,kBAAC,oBAAD,CAAmBA,UAAU,YAA7B,aACA,kBAAC,oBAAD,CAAmBA,UAAU,OAA7B,OACA,kBAAC,oBAAD,CAAmBA,UAAU,UAA7B,qB,GA3VfE,cAyWNnG","file":"static/js/52.329aa73f.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst USER_API_BASE_URL = 'http://localhost:8901/api/v1/users';\r\n\r\nclass ApiService {\r\n\r\n    fetchUsers() {\r\n        console.log('fetchUsers');\r\n        return axios.get(USER_API_BASE_URL);\r\n    }\r\n    fetchUserByFirstName(firstName) {\r\n        console.log('fetchUserByFirstName = ' + firstName);\r\n        return axios.get(USER_API_BASE_URL + '/search/' + firstName);\r\n    }\r\n\r\n    fetchUserById(userId) {\r\n        console.log('fetchUserById = ' + userId);\r\n        return axios.get(USER_API_BASE_URL + '/' + userId);\r\n    }\r\n\r\n    deleteUser(userId) {\r\n        console.log('deleteUser = ' + userId);\r\n        return axios.delete(USER_API_BASE_URL + '/' + userId);\r\n    }\r\n\r\n    addUser(user) {\r\n        console.log('addUser = ' + user);\r\n        return axios.post(USER_API_BASE_URL, user);\r\n    }\r\n\r\n    editUser(user) {\r\n        console.log('editUser = ' + user);\r\n        return axios.put(USER_API_BASE_URL + '/' + user.id, user);\r\n    }\r\n\r\n}\r\n\r\nexport default new ApiService();","import React, { Component } from 'react';\r\n// import {\r\n//     Badge,\r\n//     Button,\r\n//     Card,\r\n//     CardBody,\r\n//     CardHeader,\r\n//     Col, Dropdown, DropdownItem, DropdownMenu, DropdownToggle, Form, FormGroup, Input,\r\n//     Label,\r\n//     Pagination,\r\n//     PaginationItem,\r\n//     PaginationLink,\r\n//     Row,\r\n//     Table\r\n// } from 'reactstrap';\r\nimport {Button, Card, CardBody, CardHeader, Col, Row, Table} from \"reactstrap\";\r\nimport { BootstrapTable, TableHeaderColumn, DeleteButton } from 'react-bootstrap-table';\r\nimport ApiService from \"../../../service/ApiService\";\r\nimport swal from 'sweetalert';\r\n\r\nimport 'react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\r\n\r\n// function onRowSelect(row, isSelected, e) {\r\n//     let rowId = '';\r\n//     rowId += row.id + ',';\r\n//     console.log('id ' + rowId);\r\n//     // let rowStr = '';\r\n//     // for (const prop in row) {\r\n//     //     //console.log('prop ' + prop);\r\n//     //\r\n//     //     rowStr += row.id + ',';\r\n//     //\r\n//     //     console.log('id ' + row.id);\r\n//     // }\r\n//     // console.log(e);\r\n//     // alert(`is selected: ${isSelected}, ${rowStr}`);\r\n// }\r\n\r\n// function onSelectAll(isSelected, rows) {\r\n//     alert(`is select all: ${isSelected}`);\r\n//     if (isSelected) {\r\n//         alert('Current display and selected data: ');\r\n//     } else {\r\n//         alert('unselect rows: ');\r\n//     }\r\n//     for (let i = 0; i < rows.length; i++) {\r\n//         alert(rows[i].id);\r\n//     }\r\n// }\r\n\r\n// function customConfirm(next, dropRowKeys) {\r\n//     const dropRowKeysStr = dropRowKeys.join(',');\r\n//\r\n//     console.log('dropRowKeysStr = ' + dropRowKeysStr)\r\n//\r\n//     swal({\r\n//         title: \"Are you sure?\",\r\n//         text: \"You want to delete this user?\",\r\n//         icon: \"warning\",\r\n//         buttons: true,\r\n//         dangerMode: true,\r\n//     })\r\n//\r\n//         .then(willDelete => {\r\n//             if (willDelete) {\r\n//                 ApiService.deleteUser(dropRowKeysStr)\r\n//                     .then(res => {\r\n//                         swal({\r\n//                             title: \"Done!\",\r\n//                             text: \"User \" +dropRowKeysStr+ \" is deleted\",\r\n//                             icon: \"success\",\r\n//                             button: true\r\n//                         })\r\n//\r\n//                         //this.reloadUserList();\r\n//                         // this.setState({users: this.state.users.filter(user => user.id !== userId)});\r\n//                     });\r\n//             }\r\n//         });\r\n//\r\n// }\r\nclass Tables extends Component {\r\n  constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            firstName: '',\r\n            users: [],\r\n            message: null,\r\n            currentPage: 0,\r\n            pageStart:1,\r\n            pageTo:0,\r\n        }\r\n        this.deleteUser = this.deleteUser.bind(this);\r\n        this.editUser = this.editUser.bind(this);\r\n        this.addUser = this.addUser.bind(this);\r\n        this.reloadUserList = this.reloadUserList.bind(this);\r\n        this.customConfirm = this.customConfirm.bind(this);\r\n\r\n    }\r\n\r\n    // handleClick(e, index) {\r\n    //     console.log('index = ' + index);\r\n    //     console.log('this.pageSize = '+ this.pageSize);\r\n    //     console.log('pageTo = ' + (index + 1) * this.pageSize);\r\n    //     console.log('user list = ' + this.state.users.length);\r\n    //     e.preventDefault();\r\n    //\r\n    //     // const pageTo = 0;\r\n    //     if((index + 1) * this.pageSize > this.state.users.length){\r\n    //         this.pageTo = this.state.users.length;\r\n    //     }else{\r\n    //         this.pageTo = (index + 1) * this.pageSize;\r\n    //     }\r\n    //\r\n    //     console.log('pageTo = ' + this.pageTo);\r\n    //\r\n    //     this.setState({\r\n    //         currentPage: index\r\n    //     });\r\n    //\r\n    // }\r\n\r\n    componentDidMount() {\r\n        this.reloadUserList();\r\n    }\r\n\r\n    reloadUserList() {\r\n      console.log('reloadUserList');\r\n      //console.log('currentPage = ' + this.currentPage);\r\n        ApiService.fetchUsers()\r\n            .then((res) => {\r\n                // this.pageSize = 10;\r\n                // this.pageTo = this.pageSize;\r\n                //\r\n                // this.pagesCount = Math.ceil(res.data.length / this.pageSize);\r\n                //  console.log('res.data.result = ' + res.data.length);\r\n                //  console.log('this.pagesCount = ' + this.pagesCount);\r\n\r\n                this.setState({users: res.data})\r\n                console.log('res header = '+ res.status);\r\n            });\r\n\r\n    }\r\n\r\n    deleteUser(userId) {\r\n\r\n        swal({\r\n            title: \"Are you sure?\",\r\n            text: \"You want to delete this user?\",\r\n            icon: \"warning\",\r\n            buttons: true,\r\n            dangerMode: true,\r\n        })\r\n\r\n            .then(willDelete => {\r\n                if (willDelete) {\r\n                    ApiService.deleteUser(userId)\r\n                        .then(res => {\r\n                            swal({\r\n                                title: \"Done!\",\r\n                                text: \"User \" +userId+ \" is deleted\",\r\n                                icon: \"success\",\r\n                                button: true\r\n                            })\r\n\r\n                            //this.reloadUserList();\r\n                            // this.setState({users: this.state.users.filter(user => user.id !== userId)});\r\n                        });\r\n                }\r\n            });\r\n\r\n        // ApiService.deleteUser(userId)\r\n        //     .then(res => {\r\n        //         this.setState({message : 'User deleted successfully.'});\r\n        //         this.setState({users: this.state.users.filter(user => user.id !== userId)});\r\n        //     })\r\n\r\n    }\r\n\r\n    editUser(id) {\r\n        window.localStorage.setItem(\"id\", id);\r\n        this.props.history.push('/base/edit-user');\r\n    }\r\n\r\n    addUser() {\r\n        window.localStorage.removeItem(\"id\");\r\n        this.props.history.push('/base/add-user');\r\n    }\r\n\r\n     // onChange = (e) =>\r\n     //     this.setState({ [e.target.name]: e.target.value });\r\n\r\n    // handleChange (e) {\r\n    //     this.setState({ [e.target.name]: e.target.value });\r\n    //\r\n    //     console.log('e.target.name = ' + e.target.name);\r\n    //     console.log('e.target.value = ' + e.target.value);\r\n    //     console.log('this.state.firstName = ' + this.state.firstName);\r\n    //\r\n    //     // if((index + 1) * this.pageSize > this.state.users.length){\r\n    //     //     this.pageTo = this.state.users.length;\r\n    //     // }else{\r\n    //     //     this.pageTo = (index + 1) * this.pageSize;\r\n    //     // }\r\n    //\r\n    //     ApiService.fetchUserByFirstName(e.target.value)\r\n    //         .then((res) => {\r\n    //\r\n    //             this.pageSize = 10;\r\n    //             if(res.data.length < this.pageSize){\r\n    //                 this.pageTo = res.data.length;\r\n    //             }else{\r\n    //                 this.pageTo = this.pageSize;\r\n    //             }\r\n    //\r\n    //             this.pagesCount = Math.ceil(res.data.length / this.pageSize);\r\n    //             console.log('res.data.result = ' + res.data.length);\r\n    //             this.setState({users: res.data})\r\n    //\r\n    //         });\r\n    //\r\n    // }\r\n\r\n    // searchUser() {\r\n    //     console.log('this.state.userName = ' + this.state.userName);\r\n    //     ApiService.fetchUserById(this.state.userName)\r\n    //         .then(res => {\r\n    //             this.setState({message : 'User search successfully.'});\r\n    //             this.setState({users: this.state.users.filter(user => user.id !== this.state.userName)});\r\n    //         })\r\n    // }\r\n\r\n    renderSizePerPageDropDown = props => {\r\n        return (\r\n            <div className='btn-group'>\r\n                {\r\n                    [ 5, 10, 25, 30, 50 ].map((n, idx) => {\r\n                        //console.log('props.currSizePerPage = ' + props.currSizePerPage);\r\n                        const isActive = (n == props.currSizePerPage) ? 'active' : null;\r\n                        //console.log('isActive = ' + isActive);\r\n                        return (\r\n                            <button key={ idx } type='button' className={ `btn btn-light ${isActive}` } onClick={ () => props.changeSizePerPage(n) }>{ n }</button>\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderShowsTotal(start, to, total) {\r\n        return (\r\n            <h6 style={ { color: 'black' } }>\r\n                From { start } to { to }, Totals is { total }&nbsp;&nbsp;\r\n            </h6>\r\n        );\r\n    }\r\n\r\n    // createCustomToolBar = props => {\r\n    //     return (\r\n    //         <div style={ { margin: '15px' } }>\r\n    //             { props.components.btnGroup }\r\n    //             <div className='col-xs-8 col-sm-4 col-md-4 col-lg-2'>\r\n    //                 { props.components.searchPanel }\r\n    //             </div>\r\n    //         </div>\r\n    //     );\r\n    // }\r\n\r\n    // handleDeleteButtonClick = (onClick) => {\r\n    //     // Custom your onClick event here,\r\n    //     // it's not necessary to implement this function if you have no any process before onClick\r\n    //     console.log('This is my custom function for DeleteButton click event' );\r\n    //     onClick();\r\n    // }\r\n    //\r\n    // createCustomDeleteButton = (onClick) => {\r\n    //   console.log('createCustomDeleteButton')\r\n    //     return (\r\n    //         <DeleteButton\r\n    //             btnText='Delete'\r\n    //             btnContextual='btn-danger'\r\n    //             className='my-custom-class'\r\n    //             btnGlyphicon='fa glyphicon glyphicon-trash fa-trash'\r\n    //             onClick={ e => this.handleDeleteButtonClick(onClick) }/>\r\n    //     );\r\n    //     // If you want have more power to custom the child of DeleteButton,\r\n    //     // you can do it like following\r\n    //     // return (\r\n    //     //   <DeleteButton\r\n    //     //     btnContextual='btn-warning'\r\n    //     //     className='my-custom-class'\r\n    //     //     onClick={ () => this.handleDeleteButtonClick(onClick) }>\r\n    //     //     { ... }\r\n    //     //   </DeleteButton>\r\n    //     // );\r\n    // }\r\n\r\n    customConfirm(next, dropRowKeys) {\r\n\r\n        let dropRowKeysStr = dropRowKeys.join(',');\r\n\r\n        console.log('dropRowKeysStr = ' + dropRowKeysStr)\r\n\r\n        swal({\r\n            title: \"Are you sure?\",\r\n            text: \"You want to delete this user?\",\r\n            icon: \"warning\",\r\n            buttons: true,\r\n            dangerMode: true,\r\n        })\r\n\r\n            .then(willDelete => {\r\n                if (willDelete) {\r\n                    ApiService.deleteUser(dropRowKeysStr)\r\n                        .then(res => {\r\n                            swal({\r\n                                title: \"Done!\",\r\n                                text: \"User \" +dropRowKeysStr+ \" is deleted\",\r\n                                icon: \"success\",\r\n                                button: true\r\n                            })\r\n                            next();\r\n                            this.reloadUserList();\r\n                        });\r\n\r\n\r\n                }\r\n            });\r\n\r\n        // if (confirm(`(It's a custom confirm)Are you sure you want to delete ${dropRowKeysStr}?`)) {\r\n        //     // If the confirmation is true, call the function that\r\n        //     // continues the deletion of the record.\r\n        //     next();\r\n        // }\r\n    }\r\n\r\n    createCustomDeleteButton = (onClick) => {\r\n        return (\r\n            <DeleteButton\r\n                btnText='Delete'\r\n                btnContextual='btn-danger'\r\n                className='my-custom-class'\r\n                btnGlyphicon='fa glyphicon glyphicon-trash fa-trash'\r\n                />\r\n        );\r\n    }\r\n\r\n    render() {\r\n\r\n        // const { currentPage } = this.state;\r\n        // const { pageStart } = this.state;\r\n\r\n        const selectRow = {\r\n            mode: 'checkbox',\r\n            showOnlySelected: true,\r\n            clickToSelect: true,\r\n            bgColor: 'yellow',\r\n            // onSelect: onRowSelect,\r\n            // onSelectAll: onSelectAll\r\n        };\r\n\r\n        const options = {\r\n            handleConfirmDeleteRow: this.customConfirm,\r\n            searchPosition: 'right',  // right or left\r\n            //toolBar: this.createCustomToolBar,\r\n            //sizePerPageDropDown: this.renderSizePerPageDropDown,\r\n            //sizePerPageDropDown: this.renderSizePerPageDropDown,\r\n            page: 1,  // which page you want to show as default\r\n            sizePerPageList: [ {\r\n                text: '5', value: 5\r\n            }, {\r\n                text: '10', value: 10\r\n            }, {\r\n                text: '25', value: 25\r\n            }, {\r\n                text: '50', value: 50\r\n            }, {\r\n                text: 'All', value: this.state.users.length\r\n            } ], // you can change the dropdown list for size per page\r\n            sizePerPage: 5,  // which size per page you want to locate as default\r\n            pageStartIndex: 1, // where to start counting the pages\r\n            paginationSize: 3,  // the pagination bar size.\r\n            prePage: 'Prev', // Previous page button text\r\n            nextPage: 'Next', // Next page button text\r\n            firstPage: 'First', // First page button text\r\n            lastPage: 'Last', // Last page button text\r\n            prePageTitle: 'Go to previous', // Previous page button title\r\n            nextPageTitle: 'Go to next', // Next page button title\r\n            firstPageTitle: 'Go to first', // First page button title\r\n            lastPageTitle: 'Go to Last', // Last page button title\r\n            paginationShowsTotal: this.renderShowsTotal,  // Accept bool or function\r\n            paginationPosition: 'both',  // default is bottom, top and both is all available\r\n             keepSizePerPageState: true, //default is false, enable will keep sizePerPage dropdown state(open/clode) when external rerender happened\r\n             //hideSizePerPage: true, // You can hide the dropdown for sizePerPage\r\n             alwaysShowAllBtns: true, // Always show next and previous button\r\n             //withFirstAndLast: true, //> Hide the going to First and Last page button\r\n            // hidePageListOnlyOnePage: true > Hide the page list if only one page.\r\n            deleteBtn: this.createCustomDeleteButton\r\n        };\r\n\r\n        return (\r\n            <div className=\"animated fadeIn\">\r\n                <Row>\r\n                    <Col>\r\n                        <Card>\r\n                            <CardHeader>\r\n\r\n                                <Button color=\"success\" onClick={() => this.addUser()}>\r\n                                    <i className=\"fa fa-align-justify\"></i>&nbsp;Add User\r\n                                </Button>\r\n\r\n                            </CardHeader>\r\n\r\n                            <Table hover bordered striped responsive size=\"sm\">\r\n                            <CardBody>\r\n\r\n                                <BootstrapTable data={ this.state.users }\r\n                                                pagination={ true }\r\n                                                options={ options }\r\n                                                selectRow={ selectRow }\r\n                                                exportCSV\r\n                                                deleteRow\r\n                                                search>\r\n                                    <TableHeaderColumn dataField='id' isKey={ true }>User ID</TableHeaderColumn>\r\n                                    <TableHeaderColumn dataField='userName'>User Name</TableHeaderColumn>\r\n                                    <TableHeaderColumn dataField='firstName'>First Name</TableHeaderColumn>\r\n                                    <TableHeaderColumn dataField='lastName'>Last Name</TableHeaderColumn>\r\n                                    <TableHeaderColumn dataField='age'>Age</TableHeaderColumn>\r\n                                    <TableHeaderColumn dataField='salary'>Salary</TableHeaderColumn>\r\n\r\n                                </BootstrapTable>\r\n                            </CardBody>\r\n                            </Table>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Tables;\r\n"],"sourceRoot":""}